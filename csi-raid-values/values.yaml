image:
  baseRepoMCR: mcr.microsoft.com
  baseRepoJW: jw-cloud.org:8443
  blob:
    repository: /blob-csi
    tag: v1.0.9
    pullPolicy: IfNotPresent
  csiProvisioner:
    repository: /jw-external-provisioner
    tag: v0.0.12
    pullPolicy: IfNotPresent
  livenessProbe:
    repository: /oss/kubernetes-csi/livenessprobe
    tag: v2.5.0
    pullPolicy: IfNotPresent
  nodeDriverRegistrar:
    repository: /oss/kubernetes-csi/csi-node-driver-registrar
    tag: v2.4.0
    pullPolicy: IfNotPresent
  csiResizer:
    repository: /oss/kubernetes-csi/csi-resizer
    tag: v1.3.0
    pullPolicy: IfNotPresent

# source repositories:

#  csi-provisioner -> https://github.com/kubernetes-csi/external-provisioner
#  livenessprobe -> https://github.com/kubernetes-csi/livenessprobe
#  csi-node-driver-registrar -> https://github.com/kubernetes-csi/node-driver-registrar
#  csi-resizer -> https://github.com/kubernetes-csi/external-resizer

## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: [name: jw-repo-secret]
# - name: myRegistryKeySecretName

# -- Custom labels to add into metadata
customLabels: {}
  # k8s-app: blob-csi-driver

serviceAccount:
  create: true # When true, service accounts will be created for you. Set to false if you want to use your own.
  controller: csi-blob-controller-sa # Name of Service Account to be created or used
  node: csi-blob-node-sa # Name of Service Account to be created or used

rbac:
  create: true
  name: blob

controller:
  name: csi-blob-controller
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  allowEmptyCloudConfig: true
  hostNetwork: true # this setting could be disabled if controller does not depend on MSI setting
  metricsPort: 29634
  livenessProbe:
    healthPort: 29632
  replicas: 1
  runOnMaster: false
  logLevel: 5
  resources:
    csiProvisioner:
      limits:
        cpu: 1
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
    livenessProbe:
      limits:
        cpu: 1
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    blob:
      limits:
        cpu: 1
        memory: 200Mi
      requests:
        cpu: 10m
        memory: 20Mi
    csiResizer:
      limits:
        cpu: 1
        memory: 500Mi
      requests:
        cpu: 10m
        memory: 20Mi
  affinity: {}
  nodeSelector: {}
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/controlplane"
      operator: "Exists"
      effect: "NoSchedule"

node:
  name: csi-blob-node
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  allowEmptyCloudConfig: true
  maxUnavailable: 1
  metricsPort: 29635
  livenessProbe:
    healthPort: 29633
  logLevel: 5
  enableBlobfuseProxy: false
  blobfuseProxy:
    installBlobfuse: true
    blobfuseVersion: 1.4.1
    setMaxOpenFileNum: true
    maxOpenFileNum: "9000000"
  blobfuseCachePath: /mnt
  resources:
    livenessProbe:
      limits:
        cpu: 1
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    nodeDriverRegistrar:
      limits:
        cpu: 1
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 20Mi
    blob:
      limits:
        cpu: 2
        memory: 2100Mi
      requests:
        cpu: 10m
        memory: 20Mi
  affinity: {}
  nodeSelector: {}
  tolerations:
    - operator: "Exists"
  livenessProbe:
    healthPort: 29633

feature:
  enableFSGroupPolicy: false
  enableGetVolumeStats: false

driver:
  name: blob.csi.azure.com
  customUserAgent: ""
  userAgentSuffix: "OSS-helm"

linux:
  kubelet: /var/lib/kubelet
  distro: debian

cloud: AzurePublicCloud

## Collection of annotations to add to all the pods
podAnnotations: {}
## Collection of labels to add to all the pods
podLabels: {}
## Leverage a PriorityClass to ensure your pods survive resource shortages
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
priorityClassName: system-cluster-critical
## Security context give the opportunity to run container as nonroot by setting a securityContext
## by example :
## securityContext: { runAsUser: 1001 }
securityContext: {}

csiraid:
  nfs:
    server: 10.0.1.51
    secret: csiraidsecret-key
    backup: false
    sshkey: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFRRUF1aGxkYTllcEJRdE9RMFZjbzZJOHVZRUJDUUZBQTZkMnNXN0xkZUxDTGNkQzFNMHRSdmxvCnR4TG9hWHVsK1ZVYklYbmdQUjJrT2RsNC8yNnhrK25LZU9ZYWJEY3A4NzdSbG4wT00zaUd5Zkc4aVJRcWlIWlZma2JBdVUKdjREVlVJOWNJRFVCMXlzcSszcllxNnRaUzRpNnJIOGFBSEkya05OUXJPdzI4UmhpUkZHY0EyaFQrSUJRZXZtUUVreWFjZAo3SVIrbzdmMjh5dEhHNDVQbUgxUFhJVFRrT0RnL3NNc2h2cEhKdWZaTE14K21mRlJpdWRGZy9FRGY1SDg0bU1xWk8wWjhRCktRVG1RTzU2cGNKejZXaTlvYm5NNmIrd21lZ1Y2cnhUUVZGMzV2NzQvVURjVWZEWDRZSlR4YmcrTE1aVjBrNW5QaFFHOEQKdDQyODhFb1IwUUFBQThpL1BpRnp2ejRoY3dBQUFBZHpjMmd0Y25OaEFBQUJBUUM2R1YxcjE2a0ZDMDVEUlZ5am9qeTVnUQpFSkFVQURwM2F4YnN0MTRzSXR4MExVelMxRytXaTNFdWhwZTZYNVZSc2hlZUE5SGFRNTJYai9ickdUNmNwNDVocHNOeW56CnZ0R1dmUTR6ZUliSjhieUpGQ3FJZGxWK1JzQzVTL2dOVlFqMXdnTlFIWEt5cjdldGlycTFsTGlMcXNmeG9BY2phUTAxQ3MKN0RieEdHSkVVWndEYUZQNGdGQjYrWkFTVEpweDNzaEg2anQvYnpLMGNiamsrWWZVOWNoTk9RNE9EK3d5eUcra2NtNTlrcwp6SDZaOFZHSzUwV0Q4UU4va2Z6aVl5cGs3Um54QXBCT1pBN25xbHduUHBhTDJodWN6cHY3Q1o2QlhxdkZOQlVYZm0vdmo5ClFOeFI4TmZoZ2xQRnVENHN4bFhTVG1jK0ZBYndPM2piendTaEhSQUFBQUF3RUFBUUFBQVFCT0ViZjhOck9FRnpNVXkzTksKZmhQbGFqWHA5aWxKbnlZTzEwRHBTbUJWWGdNdVRJaVMvcXdzS1BWdzB0dFUxcHdVRmhHNDhjZGtNVlF1Szl5NUJWbllFQQpmRG4veXNjVDl4VnpMdTZyLzQxYjFXOEN2THBZREdBWjUxM1dYSkNnUkJQTXV3L3ptUHRtRmlueEVtZmFaUmlTcHB0YzFvCjBIZ202VXJGOThFdE9UQkUrYWR5QWZZK3Z2dUdBMCtHZUVJZUZGaFExUm1aelZhYjNlcDExcnRibFlpVG1YV3o4Z0MrQjgKTlBZVXI2K0txdkpqdzV0OGcvUzhsWHhuZi9PUjhDMy9UQ0RRb1lHM1d6dGRPdEF3WkpIaWlkTGk3azZ5ZzNPNzdqZTIwdQpnYnVnVFB1dmtzZGFPMGJ1a2JLbm5iSDJHdUd4V2xZVzE5MUppU1lTVGxRQkFBQUFnUUNGL0JzNHpXQWlHZlFjZEliOVpICnBORlNLMEFicGZqTUh5RkdjVGJhMDVCaU1YdEZtbHFBeUE4N3k0ci9GUk9PZkhSRlAzeU1xNEFMdHdKbC9mcXpWVW5qelAKbjUyTnlIM1lZQit0TlVVY2l6d3BQNnlNcXZQTHR1NTRpa2VFV1hVMG9QMkRHd0x3ZHFnQlNmRkoxYkI1Zk9YRzZvQ0NRRwpnYTZvRVNQOWc3RkFBQUFJRUE3Q0RTN1RHSnM3UE4ySzQ0UThYM2hiaFBpTUJtUXBIL3UvUnVnWFlYbWVoQm92UkZMcnJ0CjNOTWNya0pLYm9GTWxpVm9PVEJyaitiOFN2MWdzL3djWXA2TVo4My9FWThVaTNoSEV5bW5TY29rdndIRzEyMXZobDEyOFkKYUk1MWZNRGFwT1lDNjFTRUM3UnBQWkNqYjNIbktwaFIzUTFsZW9uczNBUkEyd0hrRUFBQUNCQU1uQ3RQeEV1OUIwckN3bApIUHdBUlVlMlo1eDFnN2pFSkdYWlpZYkJSdWVYNnNSS1VDc1QwUmlkbmFiNjNScU5PTmllUGdndURJTWs3azc1L3RzampkCnBDR1hLdDJYUFhtNzBpKzN5V1B2TXQyUDFwVHh5THBXTktGNE5HOFpFeUlxM0pRakthSkxkTzhxLzBlWU9XdUZKSFVQMWUKL1NCN2RYZVIyaENoT3krUkFBQUFEMnAzWlhkbGNrQjVkWFYyYVhNdE1RRUNBdz09Ci0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=
